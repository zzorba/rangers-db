# import Campaign from 'fragments.graphql'

query getMyCampaigns(
  $userId: String!,
  $limit: Int!,
  $offset: Int!
) {
  campaigns: rangers_user_campaign(
    where: {
      user_id: { _eq: $userId }
      campaign: {
        next_campaign_id: { _is_null: true }
      }
    }
    order_by: { updated_at: desc }
    limit: $limit
    offset: $offset
  ) {
    campaign {
      ...Campaign
    }
  }
}

query getMyTransferableCampaigns(
  $userId: String!,
  $cycles: [String!]!,
) {
  campaigns: rangers_user_campaign(
    where: {
      user_id: { _eq: $userId }
      campaign: {
        cycle_id: { _in: $cycles }
        next_campaign_id: { _is_null: true }
      }
    }
    order_by: { updated_at: desc }
  ) {
    campaign {
      ...Campaign
    }
  }
}

query getMyCampaignsTotal(
  $userId: String!
) {
  campaigns: rangers_user_campaign_aggregate(
    where: { user_id: { _eq: $userId }}
  ) {
    aggregate {
      count
    }
  }
}

query getCampaign(
  $campaignId: Int!
) {
  campaign:rangers_campaign_by_pk(id: $campaignId) {
    ...Campaign
  }
}

mutation createCampaign(
  $name: String!,
  $cycleId: String!,
  $currentLocation: String!,
) {
  campaign: insert_rangers_campaign_one(
    object: {
      name: $name
      cycle_id: $cycleId
      current_location: $currentLocation
    }
  ) {
    ...Campaign
  }
}

mutation transferCampaign(
  $campaignId: Int!,
  $cycleId: String!,
  $currentLocation: String!,
) {
  campaign: rangers_transfer_campaign(
    args: {
      existing_campaign_id: $campaignId
      cycle_code: $cycleId
      current_location: $currentLocation
    }
  ) {
    ...Campaign
  }
}

mutation setCampaignTitle(
  $name: String!,
  $campaignId: Int!
) {
  update_rangers_campaign_by_pk(
    pk_columns: { id: $campaignId }
    _set: {
      name: $name
    }
  ) {
    id
    name
  }
}

mutation addFriendToCampaign(
  $campaignId: Int!,
  $userId: String!
) {
  insert_rangers_campaign_access_one(
    object: {
      campaign_id: $campaignId,
      user_id: $userId
    }
    on_conflict: {
      constraint: campaign_access_pkey
    }
  ) {
    campaign {
      id
      access {
        user {
          ...UserInfo
        }
      }
    }
  }
}

mutation removeFriendFromCampaign(
  $campaignId: Int!,
  $userId: String!
) {
  delete_rangers_campaign_access_by_pk(campaign_id: $campaignId, user_id: $userId) {
    campaign {
      id
      access {
        user {
          ...UserInfo
        }
      }
    }
  }
}

mutation updateCampaignRewards(
  $campaignId: Int!,
  $rewards: jsonb!
) {
  update_rangers_campaign_by_pk(
    pk_columns: {
	    id: $campaignId
    }
    _set: {
      rewards: $rewards
    }
  ) {
    id
    rewards
  }
}

mutation addCampaignEvent(
  $campaignId: Int!,
  $event: jsonb!
) {
  update_rangers_campaign_by_pk(
    pk_columns: {
	    id: $campaignId
    }
    _append: {
      events: $event
    }
  ) {
    id
    events
  }
}


mutation addCampaignNote(
  $campaignId: Int!,
  $note: jsonb!
) {
  update_rangers_campaign_by_pk(
    pk_columns: {
	    id: $campaignId
    }
    _append: {
      notes: $note
    }
  ) {
    id
    notes
  }
}


mutation updateCampaignRemoved(
  $campaignId: Int!,
  $removed: jsonb!
) {
  update_rangers_campaign_by_pk(
    pk_columns: {
	    id: $campaignId
    }
    _set: {
      removed: $removed
    }
  ) {
    id
    removed
  }
}

mutation addCampaignRemoved(
  $campaignId: Int!,
  $removed: jsonb!
) {
  update_rangers_campaign_by_pk(
    pk_columns: {
	    id: $campaignId
    }
    _append: {
      removed: $removed
    }
  ) {
    id
    removed
  }
}

mutation updateCampaignNotes(
  $campaignId: Int!,
  $notes: jsonb!
) {
  update_rangers_campaign_by_pk(
    pk_columns: {
	    id: $campaignId
    }
    _set: {
      notes: $notes
    }
  ) {
    id
    notes
  }
}

mutation extendCampaign(
  $campaignId: Int!,
) {
  update_rangers_campaign_by_pk(
    pk_columns: {
	    id: $campaignId
    }
    _set: {
      extended_calendar: true
    }
  ) {
    id
    extended_calendar
  }
}

mutation updateCampaignEvents(
  $campaignId: Int!,
  $events: jsonb!
) {
  update_rangers_campaign_by_pk(
    pk_columns: {
	    id: $campaignId
    }
    _set: {
      events: $events
    }
  ) {
    id
    events
  }
}

mutation setCampaignLocation(
  $campaignId: Int!,
  $location: String!
) {
  update_rangers_campaign_by_pk(
    pk_columns: {
	    id: $campaignId
    }
    _set: {
      current_location: $location
    }
  ) {
    id
    current_location
  }
}

mutation setCampaignPathTerrain(
  $campaignId: Int!,
  $terrain: String!
) {
  update_rangers_campaign_by_pk(
    pk_columns: {
	    id: $campaignId
    }
    _set: {
      current_path_terrain: $terrain
    }
  ) {
    id
    current_path_terrain
  }
}

mutation addCampaignMission(
  $campaignId: Int!,
  $mission: jsonb!
) {
  update_rangers_campaign_by_pk(
    pk_columns: {
	    id: $campaignId
    }
    _append: {
      missions: $mission
    }
  ) {
    id
    missions
  }
}

mutation setCampaignMissions(
  $campaignId: Int!,
  $missions: jsonb!
) {
  update_rangers_campaign_by_pk(
    pk_columns: {
	    id: $campaignId
    }
    _set: {
      missions: $missions
    }
  ) {
    id
    missions
  }
}


mutation setCampaignCalendar(
  $campaignId: Int!,
  $calendar: jsonb!
) {
  campaign: update_rangers_campaign_by_pk(
    pk_columns: {
	    id: $campaignId
    }
    _set: {
      calendar: $calendar
    }
  ) {
    id
    calendar
  }
}

mutation setCampaignDay(
  $campaignId: Int!,
  $day: Int!
) {
  campaign: update_rangers_campaign_by_pk(
    pk_columns: {
	    id: $campaignId
    }
    _set: {
      day: $day
    }
  ) {
    id
    day
  }
}

mutation addCampaignHistory(
  $campaignId: Int!,
  $history: jsonb!
  $day: Int!
) {
  campaign: update_rangers_campaign_by_pk(
    pk_columns: {
	    id: $campaignId
    }
    _set: {
      day: $day
    }
    _append: {
      history: $history
    }
  ) {
    id
    history
  }
}

mutation campaignUndoTravel(
  $campaignId: Int!,
  $history: jsonb!,
  $previousDay: Int!,
  $previousLocation: String!,
  $previousPathTerrain: String
) {
  campaign: update_rangers_campaign_by_pk(
    pk_columns: {
	    id: $campaignId
    }
    _set: {
      day: $previousDay
      current_location: $previousLocation
      current_path_terrain: $previousPathTerrain
      history: $history
    }
  ) {
    id
    day
    history
    current_location
    current_path_terrain
  }
}

mutation campaignTravel(
  $campaignId: Int!,
  $day: Int!,
  $currentLocation: String!,
  $currentPathTerrain: String!
  $history: jsonb!
) {
  campaign: update_rangers_campaign_by_pk(
    pk_columns: {
	    id: $campaignId
    }
    _set: {
      day: $day
      current_location: $currentLocation
      current_path_terrain: $currentPathTerrain
    }
    _append: {
      history: $history
    }
  ) {
    id
    day
    history
    current_location
    current_path_terrain
  }
}

mutation leaveCampaign(
  $campaignId: Int!,
  $userId: String!
) {
  delete_rangers_campaign_access_by_pk(campaign_id: $campaignId, user_id: $userId) {
    campaign_id
    user_id
  }
}

mutation deleteCampaign(
  $campaignId: Int!
) {
  rangers_remove_campaign(
    args: { campaign_id: $campaignId }
  ) {
    id
  }
}
